########Start DB
dynamodb_local_latest justinbergkamp$ java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb


########Create Table

aws dynamodb create-table \
    --table-name Journal \
    --attribute-definitions \
        AttributeName=Book_ID,AttributeType=N \
        AttributeName=Date,AttributeType=S \
    --key-schema \
        AttributeName=Book_ID,KeyType=HASH \
        AttributeName=Date,KeyType=RANGE \
--provisioned-throughput \
        ReadCapacityUnits=10,WriteCapacityUnits=5 \
    --endpoint-url http://localhost:8000

##DynamoDB is schema-less, the only attributes we need in attribute definitions are the ones needed for the key-schema


########Write data

aws dynamodb put-item \
--table-name Journal  \
--item \
    '{"Book_ID": {"N": "1"}, "Date": {"S": "11/26/2019"}, "Content": {"S": "Tuesday, I worked on coding"}}' \
--endpoint-url http://localhost:8000


#######Read Data

aws dynamodb get-item \
    --consistent-read \
    --table-name Journal \
    --key '{ "Book_ID": {"N": "1"}, "Date": {"S": "11/27/2019"}}' \
    --endpoint-url http://localhost:8000

#######Update Data

aws dynamodb update-item \
  --table-name Journal \
  --key '{ "Book_ID": {"N": "1"}, "Date": {"S": "11/27/2019"}}' \
  --update-expression "SET Content = :newval" \
  --expression-attribute-values '{":newval":{"S":"Today I ate some good chili and cornbread"}}' \
  --return-values ALL_NEW \
  --endpoint-url http://localhost:8000

#######Query data

aws dynamodb query \
    --table-name Journal \
    --key-condition-expression "Book_ID = :id" \
    --expression-attribute-values  '{":id":{"N":"1"}}' \
    --endpoint-url http://localhost:8000
